// proto/observe_service.proto
syntax = "proto2";
package grpc_service;
option go_package = "./observe_service;observe_service";

import "google/protobuf/empty.proto";

// Define the service
service Observer {
  rpc StartObserver (StartRequest) returns (StartResponse);
  rpc StopObserver (StopRequest) returns (google.protobuf.Empty);
  rpc ListObservers (google.protobuf.Empty) returns (ListResponse);
  rpc GetObserverState (GetStateRequest) returns (GetStateResponse);
}

// Message definitions
message StartRequest {
  required AmberConfig amber_config = 1;
  required DexConfig dex_config = 2;
  required ArbitrageConfig arbitrage_config = 3;
}

message StartResponse {
  required string instance_id = 1;
}

message StopRequest {
  required string instance_id = 1;
}

message ListRequest {
  required string instance_id = 1;
}

message ListResponse {
  repeated ObserverInfo observers = 1;
}

message GetStateRequest {
  required string instance_id = 1;
}

message GetStateResponse {
  required int64 timestamp = 1;
  required double profit_of_buy_on_dex = 2;
  required double profit_of_sell_on_dex = 3;
}

message AmberConfig {
  required string exchange_type = 1; // Binance
  required AmberOrderBookConfig base_token_orderbook = 2;
  required AmberOrderBookConfig quote_token_orderbook = 3;
  required double taker_fee = 4; // 0.00023
}

message DexConfig {
  required DexType dex_type = 1;
  required string amm_pool = 2;
  required string token_mint = 3;
  required uint64 slippage_bps = 4;
  optional uint32 max_array_size = 5;
}

message ArbitrageConfig {
  required double quote_amount = 1; // 1.0
}

message AmberOrderBookConfig {
  required string symbol = 1; // PNUT/USDT
  optional int32 ask_depth = 2 [default = 20];
  optional int32 bid_depth = 3 [default = 20];
}

message ObserverInfo {
  required string instance_id = 1;
  required DexType dex_type = 2;
}

enum DexType {
  RAY_AMM = 0;
  RAY_CLMM = 1;
}