// proto/observe_service.proto
syntax = "proto2";
package grpc_service;
option go_package = "./observer_service;observer_service";

import "google/protobuf/empty.proto";

// Define the service
service Arbitrager {
  rpc Start (StartRequest) returns (InstantId);
  rpc Stop (InstantId) returns (google.protobuf.Empty);
  rpc List (google.protobuf.Empty) returns (ListResponse);
  rpc GetObserverState (InstantId) returns (GetStateResponse);
  rpc GetObserverParams (InstantId) returns (ObserverParams);
  rpc UpdateObserverParams (UpdateObserverParamsRequest) returns (google.protobuf.Empty);
  rpc EnableTrader (EnableTraderRequest) returns (google.protobuf.Empty);
  rpc DisableTrader (InstantId) returns (google.protobuf.Empty);
  rpc GetTraderParams (InstantId) returns (TraderParams);
  rpc UpdateTraderParams (UpdateTraderParamsRequest) returns (google.protobuf.Empty);
}

// Message definitions

message StartRequest {
  required AmberObserverConfig amber_config = 1;
  required DexConfig dex_config = 2;
  required ObserverParams params = 3;
}

message EnableTraderRequest {
  required string instance_id = 1;
  required AmberTraderConfig amber_config = 2;
  required TraderParams params = 3;
}

message ListResponse {
  repeated Info infos = 1;
}

message GetStateResponse {
  required int64 timestamp = 1;
  required ArbitrageState buy_on_dex = 2;
  required ArbitrageState sell_on_dex = 3;
}

message UpdateObserverParamsRequest {
  required string instance_id = 1;
  required ObserverParams params = 2;
}

message UpdateTraderParamsRequest {
  required string instance_id = 1;
  required TraderParams params = 2;
}

// Config

message AmberObserverConfig {
  required string exchange_type = 1; // Binance
  required string target_token = 2; // TRUMP
  required string quote_token = 3; // USDT
  optional int32 ask_depth = 4; // 20
  optional int32 bid_depth = 5; // 20
  required double taker_fee = 6; // 0.00023
}

message AmberTraderConfig {
  required string exchange_type = 1; // BinanceClassicUnifiedMargin
}

message DexConfig {
  oneof config {
    RayAmmConfig ray_amm = 1;
    RayClmmConfig ray_clmm = 2;
  }
}

message RayAmmConfig {
  required string pool = 1;
  required string token_mint = 2;
}

message RayClmmConfig {
  required string pool = 1;
  required string token_mint = 2;
  optional uint32 max_array_size = 3;
}

// Params

message ObserverParams {
  required double sol_amount = 1;
}

message TraderParams {
  required uint64 slippage_bps = 1;
  required double min_profit = 2;
  required TxBuildParam tx_build_param = 3;
}

message TxBuildParam {
  optional uint64 priority_fee = 2; // 100_000
  required uint64 jito_fee = 3; // 100_000
}

message Info {
  required string instance_id = 1;
  required DexType dex_type = 2;
}

message ArbitrageState {
  required double cex_target_symbol_quantity = 1;
  required double cex_target_symbol_quote_amount = 2;
  required double cex_sol_symbol_quantity = 3;
  required double cex_sol_symbol_quote_amount = 4;
  required double dex_target_amount = 5;
  required double dex_sol_amount = 6;
  required double profit_quote_amount = 7;
}

enum DexType {
  RAY_AMM = 0;
  RAY_CLMM = 1;
}

message InstantId {
  required string instance_id = 1;
}