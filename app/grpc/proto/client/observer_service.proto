// proto/observe_service.proto
syntax = "proto2";
package grpc_service;
option go_package = "./observer_service;observer_service";

import "google/protobuf/empty.proto";

// Define the service
service Arbitrager {
  rpc Start (StartRequest) returns (google.protobuf.Empty);
  rpc Stop (InstantId) returns (google.protobuf.Empty);
  rpc Get (InstantId) returns (BasicInfo);
  rpc List (google.protobuf.Empty) returns (ListResponse);
  rpc GetObserverState (InstantId) returns (GetStateResponse);
  rpc GetObserverParams (InstantId) returns (ObserverParams);
  rpc UpdateObserverParams (UpdateObserverParamsRequest) returns (google.protobuf.Empty);
  rpc EnableTrader (EnableTraderRequest) returns (google.protobuf.Empty);
  rpc DisableTrader (InstantId) returns (google.protobuf.Empty);
  rpc GetTraderParams (InstantId) returns (TraderParams);
  rpc UpdateTraderParams (UpdateTraderParamsRequest) returns (google.protobuf.Empty);
}

// Message definitions

message StartRequest {
  required string instance_id = 1;
  required AmberObserverConfig amber_config = 2;
  required DexConfig dex_config = 3;
  required ObserverParams params = 4;
}

message EnableTraderRequest {
  required string instance_id = 1;
  required CexConfig cex_config = 2;
  required SwapperConfig swapper_config = 3;
  required TraderParams params = 4;
}

message ListResponse {
  repeated BasicInfo infos = 1;
}

message GetStateResponse {
  required int64 timestamp = 1;
  required ObserverState buy_on_dex = 2;
  required ObserverState sell_on_dex = 3;
}

message UpdateObserverParamsRequest {
  required string instance_id = 1;
  required ObserverParams params = 2;
}

message UpdateTraderParamsRequest {
  required string instance_id = 1;
  required TraderParams params = 2;
}

// Config

message AmberObserverConfig {
  required string exchange_type = 1; // Binance
  required string target_token = 2; // TRUMP
  required string quote_token = 3; // USDT
  optional int32 ask_depth = 4; // 20
  optional int32 bid_depth = 5; // 20
  required double taker_fee = 6; // 0.00023
}

message CexConfig {
  oneof config {
    AmberTraderConfig amber = 1;
    GateioTraderConfig gateio = 2;
  }
}

message AmberTraderConfig {
  required string exchange_type = 1; // BinanceClassicUnifiedMargin
  required string account_type = 2; // Exchange
  required string contract_type = 3; // Spot
  required string account_id = 4; // QuantaVerse13
  required string access_token = 5; // 1234567890
}

message GateioTraderConfig {
  required string account_type = 1; // Unified
  required string api_key = 2;
  required string api_secret = 3;
}

message SwapperConfig {
  required string trader = 1;
}

message DexConfig {
  oneof config {
    RayAmmConfig ray_amm = 1;
    RayClmmConfig ray_clmm = 2;
    OrcaWhirlPoolConfig orca_whirl_pool = 3;
  }
}

message RayAmmConfig {
  required string pool = 1;
  required string token_mint = 2;
}

message RayClmmConfig {
  required string pool = 1;
  required string token_mint = 2;
  optional uint32 max_array_size = 3;
}

message OrcaWhirlPoolConfig {
  required string pool = 1;
  required string token_mint = 2;
}

// Params

message ObserverParams {
  required double min_quote_amount = 1;
  required double max_quote_amount = 2;
  required double profit_trigger_rate = 3; // 0% - 1%
}

message TraderParams {
  required bool prefer_jito = 1;
  required double priority_fee = 2; // 0.0001
  required double slippage_rate = 3; // 0% - 100%
  required double jito_fee_rate = 4; // 0% - 100%
}

message BasicInfo {
  required string instance_id = 1;
  required AmberObserverConfig amber_observer_config = 2;
  required DexConfig dex_config = 3;
  required bool trader_enabled = 4;
  optional CexConfig cex_config = 5;
  optional SwapperConfig swapper_config = 6;
}

message ObserverState {
  required double dex_target_amount = 1;
  required double dex_sol_amount = 2;
  required double cex_sell_quantity = 3;
  required double cex_sell_quote_amount = 4;
  required double cex_buy_quantity = 5;
  required double cex_buy_quote_amount = 6;
}

message InstantId {
  required string instance_id = 1;
}