// proto/observe_service.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.20.3
// source: observer_service.proto

package observer_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DexType int32

const (
	DexType_RAY_AMM  DexType = 0
	DexType_RAY_CLMM DexType = 1
)

// Enum value maps for DexType.
var (
	DexType_name = map[int32]string{
		0: "RAY_AMM",
		1: "RAY_CLMM",
	}
	DexType_value = map[string]int32{
		"RAY_AMM":  0,
		"RAY_CLMM": 1,
	}
)

func (x DexType) Enum() *DexType {
	p := new(DexType)
	*p = x
	return p
}

func (x DexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DexType) Descriptor() protoreflect.EnumDescriptor {
	return file_observer_service_proto_enumTypes[0].Descriptor()
}

func (DexType) Type() protoreflect.EnumType {
	return &file_observer_service_proto_enumTypes[0]
}

func (x DexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DexType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DexType(num)
	return nil
}

// Deprecated: Use DexType.Descriptor instead.
func (DexType) EnumDescriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{0}
}

type StartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AmberConfig   *AmberObserverConfig   `protobuf:"bytes,1,req,name=amber_config,json=amberConfig" json:"amber_config,omitempty"`
	DexConfig     *DexConfig             `protobuf:"bytes,2,req,name=dex_config,json=dexConfig" json:"dex_config,omitempty"`
	Params        *ObserverParams        `protobuf:"bytes,3,req,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_observer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartRequest) GetAmberConfig() *AmberObserverConfig {
	if x != nil {
		return x.AmberConfig
	}
	return nil
}

func (x *StartRequest) GetDexConfig() *DexConfig {
	if x != nil {
		return x.DexConfig
	}
	return nil
}

func (x *StartRequest) GetParams() *ObserverParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type EnableTraderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    *string                `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	AmberConfig   *AmberTraderConfig     `protobuf:"bytes,2,req,name=amber_config,json=amberConfig" json:"amber_config,omitempty"`
	Params        *TraderParams          `protobuf:"bytes,3,req,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableTraderRequest) Reset() {
	*x = EnableTraderRequest{}
	mi := &file_observer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableTraderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTraderRequest) ProtoMessage() {}

func (x *EnableTraderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTraderRequest.ProtoReflect.Descriptor instead.
func (*EnableTraderRequest) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnableTraderRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *EnableTraderRequest) GetAmberConfig() *AmberTraderConfig {
	if x != nil {
		return x.AmberConfig
	}
	return nil
}

func (x *EnableTraderRequest) GetParams() *TraderParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Infos         []*BasicInfo           `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_observer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListResponse) GetInfos() []*BasicInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *int64                 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	BuyOnDex      *ArbitrageState        `protobuf:"bytes,2,req,name=buy_on_dex,json=buyOnDex" json:"buy_on_dex,omitempty"`
	SellOnDex     *ArbitrageState        `protobuf:"bytes,3,req,name=sell_on_dex,json=sellOnDex" json:"sell_on_dex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	mi := &file_observer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetStateResponse) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *GetStateResponse) GetBuyOnDex() *ArbitrageState {
	if x != nil {
		return x.BuyOnDex
	}
	return nil
}

func (x *GetStateResponse) GetSellOnDex() *ArbitrageState {
	if x != nil {
		return x.SellOnDex
	}
	return nil
}

type UpdateObserverParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    *string                `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Params        *ObserverParams        `protobuf:"bytes,2,req,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObserverParamsRequest) Reset() {
	*x = UpdateObserverParamsRequest{}
	mi := &file_observer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObserverParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObserverParamsRequest) ProtoMessage() {}

func (x *UpdateObserverParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObserverParamsRequest.ProtoReflect.Descriptor instead.
func (*UpdateObserverParamsRequest) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateObserverParamsRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *UpdateObserverParamsRequest) GetParams() *ObserverParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateTraderParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    *string                `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Params        *TraderParams          `protobuf:"bytes,2,req,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTraderParamsRequest) Reset() {
	*x = UpdateTraderParamsRequest{}
	mi := &file_observer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTraderParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTraderParamsRequest) ProtoMessage() {}

func (x *UpdateTraderParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTraderParamsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTraderParamsRequest) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTraderParamsRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *UpdateTraderParamsRequest) GetParams() *TraderParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type AmberObserverConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExchangeType  *string                `protobuf:"bytes,1,req,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"` // Binance
	TargetToken   *string                `protobuf:"bytes,2,req,name=target_token,json=targetToken" json:"target_token,omitempty"`    // TRUMP
	QuoteToken    *string                `protobuf:"bytes,3,req,name=quote_token,json=quoteToken" json:"quote_token,omitempty"`       // USDT
	AskDepth      *int32                 `protobuf:"varint,4,opt,name=ask_depth,json=askDepth" json:"ask_depth,omitempty"`            // 20
	BidDepth      *int32                 `protobuf:"varint,5,opt,name=bid_depth,json=bidDepth" json:"bid_depth,omitempty"`            // 20
	TakerFee      *float64               `protobuf:"fixed64,6,req,name=taker_fee,json=takerFee" json:"taker_fee,omitempty"`           // 0.00023
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AmberObserverConfig) Reset() {
	*x = AmberObserverConfig{}
	mi := &file_observer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmberObserverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmberObserverConfig) ProtoMessage() {}

func (x *AmberObserverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmberObserverConfig.ProtoReflect.Descriptor instead.
func (*AmberObserverConfig) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{6}
}

func (x *AmberObserverConfig) GetExchangeType() string {
	if x != nil && x.ExchangeType != nil {
		return *x.ExchangeType
	}
	return ""
}

func (x *AmberObserverConfig) GetTargetToken() string {
	if x != nil && x.TargetToken != nil {
		return *x.TargetToken
	}
	return ""
}

func (x *AmberObserverConfig) GetQuoteToken() string {
	if x != nil && x.QuoteToken != nil {
		return *x.QuoteToken
	}
	return ""
}

func (x *AmberObserverConfig) GetAskDepth() int32 {
	if x != nil && x.AskDepth != nil {
		return *x.AskDepth
	}
	return 0
}

func (x *AmberObserverConfig) GetBidDepth() int32 {
	if x != nil && x.BidDepth != nil {
		return *x.BidDepth
	}
	return 0
}

func (x *AmberObserverConfig) GetTakerFee() float64 {
	if x != nil && x.TakerFee != nil {
		return *x.TakerFee
	}
	return 0
}

type AmberTraderConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExchangeType  *string                `protobuf:"bytes,1,req,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"` // BinanceClassicUnifiedMargin
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AmberTraderConfig) Reset() {
	*x = AmberTraderConfig{}
	mi := &file_observer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmberTraderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmberTraderConfig) ProtoMessage() {}

func (x *AmberTraderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmberTraderConfig.ProtoReflect.Descriptor instead.
func (*AmberTraderConfig) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{7}
}

func (x *AmberTraderConfig) GetExchangeType() string {
	if x != nil && x.ExchangeType != nil {
		return *x.ExchangeType
	}
	return ""
}

type DexConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Config:
	//
	//	*DexConfig_RayAmm
	//	*DexConfig_RayClmm
	Config        isDexConfig_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexConfig) Reset() {
	*x = DexConfig{}
	mi := &file_observer_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexConfig) ProtoMessage() {}

func (x *DexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexConfig.ProtoReflect.Descriptor instead.
func (*DexConfig) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{8}
}

func (x *DexConfig) GetConfig() isDexConfig_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DexConfig) GetRayAmm() *RayAmmConfig {
	if x != nil {
		if x, ok := x.Config.(*DexConfig_RayAmm); ok {
			return x.RayAmm
		}
	}
	return nil
}

func (x *DexConfig) GetRayClmm() *RayClmmConfig {
	if x != nil {
		if x, ok := x.Config.(*DexConfig_RayClmm); ok {
			return x.RayClmm
		}
	}
	return nil
}

type isDexConfig_Config interface {
	isDexConfig_Config()
}

type DexConfig_RayAmm struct {
	RayAmm *RayAmmConfig `protobuf:"bytes,1,opt,name=ray_amm,json=rayAmm,oneof"`
}

type DexConfig_RayClmm struct {
	RayClmm *RayClmmConfig `protobuf:"bytes,2,opt,name=ray_clmm,json=rayClmm,oneof"`
}

func (*DexConfig_RayAmm) isDexConfig_Config() {}

func (*DexConfig_RayClmm) isDexConfig_Config() {}

type RayAmmConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pool          *string                `protobuf:"bytes,1,req,name=pool" json:"pool,omitempty"`
	TokenMint     *string                `protobuf:"bytes,2,req,name=token_mint,json=tokenMint" json:"token_mint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RayAmmConfig) Reset() {
	*x = RayAmmConfig{}
	mi := &file_observer_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RayAmmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayAmmConfig) ProtoMessage() {}

func (x *RayAmmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayAmmConfig.ProtoReflect.Descriptor instead.
func (*RayAmmConfig) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{9}
}

func (x *RayAmmConfig) GetPool() string {
	if x != nil && x.Pool != nil {
		return *x.Pool
	}
	return ""
}

func (x *RayAmmConfig) GetTokenMint() string {
	if x != nil && x.TokenMint != nil {
		return *x.TokenMint
	}
	return ""
}

type RayClmmConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pool          *string                `protobuf:"bytes,1,req,name=pool" json:"pool,omitempty"`
	TokenMint     *string                `protobuf:"bytes,2,req,name=token_mint,json=tokenMint" json:"token_mint,omitempty"`
	MaxArraySize  *uint32                `protobuf:"varint,3,opt,name=max_array_size,json=maxArraySize" json:"max_array_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RayClmmConfig) Reset() {
	*x = RayClmmConfig{}
	mi := &file_observer_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RayClmmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayClmmConfig) ProtoMessage() {}

func (x *RayClmmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayClmmConfig.ProtoReflect.Descriptor instead.
func (*RayClmmConfig) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{10}
}

func (x *RayClmmConfig) GetPool() string {
	if x != nil && x.Pool != nil {
		return *x.Pool
	}
	return ""
}

func (x *RayClmmConfig) GetTokenMint() string {
	if x != nil && x.TokenMint != nil {
		return *x.TokenMint
	}
	return ""
}

func (x *RayClmmConfig) GetMaxArraySize() uint32 {
	if x != nil && x.MaxArraySize != nil {
		return *x.MaxArraySize
	}
	return 0
}

type ObserverParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SolAmount     *float64               `protobuf:"fixed64,1,req,name=sol_amount,json=solAmount" json:"sol_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObserverParams) Reset() {
	*x = ObserverParams{}
	mi := &file_observer_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObserverParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverParams) ProtoMessage() {}

func (x *ObserverParams) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverParams.ProtoReflect.Descriptor instead.
func (*ObserverParams) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{11}
}

func (x *ObserverParams) GetSolAmount() float64 {
	if x != nil && x.SolAmount != nil {
		return *x.SolAmount
	}
	return 0
}

type TraderParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlippageBps   *uint64                `protobuf:"varint,1,req,name=slippage_bps,json=slippageBps" json:"slippage_bps,omitempty"`
	MinProfit     *float64               `protobuf:"fixed64,2,req,name=min_profit,json=minProfit" json:"min_profit,omitempty"`
	TxBuildParam  *TxBuildParam          `protobuf:"bytes,3,req,name=tx_build_param,json=txBuildParam" json:"tx_build_param,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraderParams) Reset() {
	*x = TraderParams{}
	mi := &file_observer_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraderParams) ProtoMessage() {}

func (x *TraderParams) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraderParams.ProtoReflect.Descriptor instead.
func (*TraderParams) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{12}
}

func (x *TraderParams) GetSlippageBps() uint64 {
	if x != nil && x.SlippageBps != nil {
		return *x.SlippageBps
	}
	return 0
}

func (x *TraderParams) GetMinProfit() float64 {
	if x != nil && x.MinProfit != nil {
		return *x.MinProfit
	}
	return 0
}

func (x *TraderParams) GetTxBuildParam() *TxBuildParam {
	if x != nil {
		return x.TxBuildParam
	}
	return nil
}

type TxBuildParam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PriorityFee   *uint64                `protobuf:"varint,2,opt,name=priority_fee,json=priorityFee" json:"priority_fee,omitempty"` // 100_000
	JitoFee       *uint64                `protobuf:"varint,3,req,name=jito_fee,json=jitoFee" json:"jito_fee,omitempty"`             // 100_000
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxBuildParam) Reset() {
	*x = TxBuildParam{}
	mi := &file_observer_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxBuildParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxBuildParam) ProtoMessage() {}

func (x *TxBuildParam) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxBuildParam.ProtoReflect.Descriptor instead.
func (*TxBuildParam) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{13}
}

func (x *TxBuildParam) GetPriorityFee() uint64 {
	if x != nil && x.PriorityFee != nil {
		return *x.PriorityFee
	}
	return 0
}

func (x *TxBuildParam) GetJitoFee() uint64 {
	if x != nil && x.JitoFee != nil {
		return *x.JitoFee
	}
	return 0
}

type BasicInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	InstanceId          *string                `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	DexType             *DexType               `protobuf:"varint,2,req,name=dex_type,json=dexType,enum=grpc_service.DexType" json:"dex_type,omitempty"`
	AmberObserverConfig *AmberObserverConfig   `protobuf:"bytes,3,req,name=amber_observer_config,json=amberObserverConfig" json:"amber_observer_config,omitempty"`
	DexConfig           *DexConfig             `protobuf:"bytes,4,req,name=dex_config,json=dexConfig" json:"dex_config,omitempty"`
	TraderEnabled       *bool                  `protobuf:"varint,5,req,name=trader_enabled,json=traderEnabled" json:"trader_enabled,omitempty"`
	AmberTraderConfig   *AmberTraderConfig     `protobuf:"bytes,6,opt,name=amber_trader_config,json=amberTraderConfig" json:"amber_trader_config,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BasicInfo) Reset() {
	*x = BasicInfo{}
	mi := &file_observer_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInfo) ProtoMessage() {}

func (x *BasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInfo.ProtoReflect.Descriptor instead.
func (*BasicInfo) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{14}
}

func (x *BasicInfo) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *BasicInfo) GetDexType() DexType {
	if x != nil && x.DexType != nil {
		return *x.DexType
	}
	return DexType_RAY_AMM
}

func (x *BasicInfo) GetAmberObserverConfig() *AmberObserverConfig {
	if x != nil {
		return x.AmberObserverConfig
	}
	return nil
}

func (x *BasicInfo) GetDexConfig() *DexConfig {
	if x != nil {
		return x.DexConfig
	}
	return nil
}

func (x *BasicInfo) GetTraderEnabled() bool {
	if x != nil && x.TraderEnabled != nil {
		return *x.TraderEnabled
	}
	return false
}

func (x *BasicInfo) GetAmberTraderConfig() *AmberTraderConfig {
	if x != nil {
		return x.AmberTraderConfig
	}
	return nil
}

type ArbitrageState struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CexTargetSymbolQuantity    *float64               `protobuf:"fixed64,1,req,name=cex_target_symbol_quantity,json=cexTargetSymbolQuantity" json:"cex_target_symbol_quantity,omitempty"`
	CexTargetSymbolQuoteAmount *float64               `protobuf:"fixed64,2,req,name=cex_target_symbol_quote_amount,json=cexTargetSymbolQuoteAmount" json:"cex_target_symbol_quote_amount,omitempty"`
	CexSolSymbolQuantity       *float64               `protobuf:"fixed64,3,req,name=cex_sol_symbol_quantity,json=cexSolSymbolQuantity" json:"cex_sol_symbol_quantity,omitempty"`
	CexSolSymbolQuoteAmount    *float64               `protobuf:"fixed64,4,req,name=cex_sol_symbol_quote_amount,json=cexSolSymbolQuoteAmount" json:"cex_sol_symbol_quote_amount,omitempty"`
	DexTargetAmount            *float64               `protobuf:"fixed64,5,req,name=dex_target_amount,json=dexTargetAmount" json:"dex_target_amount,omitempty"`
	DexSolAmount               *float64               `protobuf:"fixed64,6,req,name=dex_sol_amount,json=dexSolAmount" json:"dex_sol_amount,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ArbitrageState) Reset() {
	*x = ArbitrageState{}
	mi := &file_observer_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArbitrageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitrageState) ProtoMessage() {}

func (x *ArbitrageState) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitrageState.ProtoReflect.Descriptor instead.
func (*ArbitrageState) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{15}
}

func (x *ArbitrageState) GetCexTargetSymbolQuantity() float64 {
	if x != nil && x.CexTargetSymbolQuantity != nil {
		return *x.CexTargetSymbolQuantity
	}
	return 0
}

func (x *ArbitrageState) GetCexTargetSymbolQuoteAmount() float64 {
	if x != nil && x.CexTargetSymbolQuoteAmount != nil {
		return *x.CexTargetSymbolQuoteAmount
	}
	return 0
}

func (x *ArbitrageState) GetCexSolSymbolQuantity() float64 {
	if x != nil && x.CexSolSymbolQuantity != nil {
		return *x.CexSolSymbolQuantity
	}
	return 0
}

func (x *ArbitrageState) GetCexSolSymbolQuoteAmount() float64 {
	if x != nil && x.CexSolSymbolQuoteAmount != nil {
		return *x.CexSolSymbolQuoteAmount
	}
	return 0
}

func (x *ArbitrageState) GetDexTargetAmount() float64 {
	if x != nil && x.DexTargetAmount != nil {
		return *x.DexTargetAmount
	}
	return 0
}

func (x *ArbitrageState) GetDexSolAmount() float64 {
	if x != nil && x.DexSolAmount != nil {
		return *x.DexSolAmount
	}
	return 0
}

type InstantId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    *string                `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstantId) Reset() {
	*x = InstantId{}
	mi := &file_observer_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstantId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantId) ProtoMessage() {}

func (x *InstantId) ProtoReflect() protoreflect.Message {
	mi := &file_observer_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantId.ProtoReflect.Descriptor instead.
func (*InstantId) Descriptor() ([]byte, []int) {
	return file_observer_service_proto_rawDescGZIP(), []int{16}
}

func (x *InstantId) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

var File_observer_service_proto protoreflect.FileDescriptor

var file_observer_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3d, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x62,
	0x75, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x4f, 0x6e, 0x44, 0x65, 0x78, 0x22, 0x74, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x13, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x22, 0x38, 0x0a, 0x11, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a,
	0x07, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61,
	0x79, 0x41, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x72, 0x61,
	0x79, 0x41, 0x6d, 0x6d, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x6d, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x79, 0x43, 0x6c, 0x6d, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x79, 0x43, 0x6c, 0x6d, 0x6d, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x41, 0x0a, 0x0c, 0x52, 0x61, 0x79, 0x41,
	0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x0d, 0x52,
	0x61, 0x79, 0x43, 0x6c, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2f, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x70, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x42, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x78, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x74,
	0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4c, 0x0a, 0x0c, 0x54,
	0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x69, 0x74, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x07, 0x6a, 0x69, 0x74, 0x6f, 0x46, 0x65, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x61, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x13, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x61, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x17, 0x63, 0x65, 0x78, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x1a, 0x63, 0x65, 0x78, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x6c,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x14, 0x63, 0x65, 0x78, 0x53, 0x6f, 0x6c, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1b,
	0x63, 0x65, 0x78, 0x5f, 0x73, 0x6f, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x17, 0x63, 0x65, 0x78, 0x53, 0x6f, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65,
	0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x6f,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0c,
	0x64, 0x65, 0x78, 0x53, 0x6f, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x2a, 0x24, 0x0a, 0x07, 0x44, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x59, 0x5f, 0x41, 0x4d, 0x4d,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x59, 0x5f, 0x43, 0x4c, 0x4d, 0x4d, 0x10, 0x01,
	0x32, 0x98, 0x06, 0x0a, 0x0a, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x49, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x25, 0x5a, 0x23, 0x2e,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x3b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65,
}

var (
	file_observer_service_proto_rawDescOnce sync.Once
	file_observer_service_proto_rawDescData = file_observer_service_proto_rawDesc
)

func file_observer_service_proto_rawDescGZIP() []byte {
	file_observer_service_proto_rawDescOnce.Do(func() {
		file_observer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_observer_service_proto_rawDescData)
	})
	return file_observer_service_proto_rawDescData
}

var file_observer_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_observer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_observer_service_proto_goTypes = []any{
	(DexType)(0),                        // 0: grpc_service.DexType
	(*StartRequest)(nil),                // 1: grpc_service.StartRequest
	(*EnableTraderRequest)(nil),         // 2: grpc_service.EnableTraderRequest
	(*ListResponse)(nil),                // 3: grpc_service.ListResponse
	(*GetStateResponse)(nil),            // 4: grpc_service.GetStateResponse
	(*UpdateObserverParamsRequest)(nil), // 5: grpc_service.UpdateObserverParamsRequest
	(*UpdateTraderParamsRequest)(nil),   // 6: grpc_service.UpdateTraderParamsRequest
	(*AmberObserverConfig)(nil),         // 7: grpc_service.AmberObserverConfig
	(*AmberTraderConfig)(nil),           // 8: grpc_service.AmberTraderConfig
	(*DexConfig)(nil),                   // 9: grpc_service.DexConfig
	(*RayAmmConfig)(nil),                // 10: grpc_service.RayAmmConfig
	(*RayClmmConfig)(nil),               // 11: grpc_service.RayClmmConfig
	(*ObserverParams)(nil),              // 12: grpc_service.ObserverParams
	(*TraderParams)(nil),                // 13: grpc_service.TraderParams
	(*TxBuildParam)(nil),                // 14: grpc_service.TxBuildParam
	(*BasicInfo)(nil),                   // 15: grpc_service.BasicInfo
	(*ArbitrageState)(nil),              // 16: grpc_service.ArbitrageState
	(*InstantId)(nil),                   // 17: grpc_service.InstantId
	(*emptypb.Empty)(nil),               // 18: google.protobuf.Empty
}
var file_observer_service_proto_depIdxs = []int32{
	7,  // 0: grpc_service.StartRequest.amber_config:type_name -> grpc_service.AmberObserverConfig
	9,  // 1: grpc_service.StartRequest.dex_config:type_name -> grpc_service.DexConfig
	12, // 2: grpc_service.StartRequest.params:type_name -> grpc_service.ObserverParams
	8,  // 3: grpc_service.EnableTraderRequest.amber_config:type_name -> grpc_service.AmberTraderConfig
	13, // 4: grpc_service.EnableTraderRequest.params:type_name -> grpc_service.TraderParams
	15, // 5: grpc_service.ListResponse.infos:type_name -> grpc_service.BasicInfo
	16, // 6: grpc_service.GetStateResponse.buy_on_dex:type_name -> grpc_service.ArbitrageState
	16, // 7: grpc_service.GetStateResponse.sell_on_dex:type_name -> grpc_service.ArbitrageState
	12, // 8: grpc_service.UpdateObserverParamsRequest.params:type_name -> grpc_service.ObserverParams
	13, // 9: grpc_service.UpdateTraderParamsRequest.params:type_name -> grpc_service.TraderParams
	10, // 10: grpc_service.DexConfig.ray_amm:type_name -> grpc_service.RayAmmConfig
	11, // 11: grpc_service.DexConfig.ray_clmm:type_name -> grpc_service.RayClmmConfig
	14, // 12: grpc_service.TraderParams.tx_build_param:type_name -> grpc_service.TxBuildParam
	0,  // 13: grpc_service.BasicInfo.dex_type:type_name -> grpc_service.DexType
	7,  // 14: grpc_service.BasicInfo.amber_observer_config:type_name -> grpc_service.AmberObserverConfig
	9,  // 15: grpc_service.BasicInfo.dex_config:type_name -> grpc_service.DexConfig
	8,  // 16: grpc_service.BasicInfo.amber_trader_config:type_name -> grpc_service.AmberTraderConfig
	1,  // 17: grpc_service.Arbitrager.Start:input_type -> grpc_service.StartRequest
	17, // 18: grpc_service.Arbitrager.Stop:input_type -> grpc_service.InstantId
	17, // 19: grpc_service.Arbitrager.Get:input_type -> grpc_service.InstantId
	18, // 20: grpc_service.Arbitrager.List:input_type -> google.protobuf.Empty
	17, // 21: grpc_service.Arbitrager.GetObserverState:input_type -> grpc_service.InstantId
	17, // 22: grpc_service.Arbitrager.GetObserverParams:input_type -> grpc_service.InstantId
	5,  // 23: grpc_service.Arbitrager.UpdateObserverParams:input_type -> grpc_service.UpdateObserverParamsRequest
	2,  // 24: grpc_service.Arbitrager.EnableTrader:input_type -> grpc_service.EnableTraderRequest
	17, // 25: grpc_service.Arbitrager.DisableTrader:input_type -> grpc_service.InstantId
	17, // 26: grpc_service.Arbitrager.GetTraderParams:input_type -> grpc_service.InstantId
	6,  // 27: grpc_service.Arbitrager.UpdateTraderParams:input_type -> grpc_service.UpdateTraderParamsRequest
	17, // 28: grpc_service.Arbitrager.Start:output_type -> grpc_service.InstantId
	18, // 29: grpc_service.Arbitrager.Stop:output_type -> google.protobuf.Empty
	15, // 30: grpc_service.Arbitrager.Get:output_type -> grpc_service.BasicInfo
	3,  // 31: grpc_service.Arbitrager.List:output_type -> grpc_service.ListResponse
	4,  // 32: grpc_service.Arbitrager.GetObserverState:output_type -> grpc_service.GetStateResponse
	12, // 33: grpc_service.Arbitrager.GetObserverParams:output_type -> grpc_service.ObserverParams
	18, // 34: grpc_service.Arbitrager.UpdateObserverParams:output_type -> google.protobuf.Empty
	18, // 35: grpc_service.Arbitrager.EnableTrader:output_type -> google.protobuf.Empty
	18, // 36: grpc_service.Arbitrager.DisableTrader:output_type -> google.protobuf.Empty
	13, // 37: grpc_service.Arbitrager.GetTraderParams:output_type -> grpc_service.TraderParams
	18, // 38: grpc_service.Arbitrager.UpdateTraderParams:output_type -> google.protobuf.Empty
	28, // [28:39] is the sub-list for method output_type
	17, // [17:28] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_observer_service_proto_init() }
func file_observer_service_proto_init() {
	if File_observer_service_proto != nil {
		return
	}
	file_observer_service_proto_msgTypes[8].OneofWrappers = []any{
		(*DexConfig_RayAmm)(nil),
		(*DexConfig_RayClmm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_observer_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_observer_service_proto_goTypes,
		DependencyIndexes: file_observer_service_proto_depIdxs,
		EnumInfos:         file_observer_service_proto_enumTypes,
		MessageInfos:      file_observer_service_proto_msgTypes,
	}.Build()
	File_observer_service_proto = out.File
	file_observer_service_proto_rawDesc = nil
	file_observer_service_proto_goTypes = nil
	file_observer_service_proto_depIdxs = nil
}
