// proto/trigger_service.proto
syntax = "proto3";
package grpc_service;
option go_package = "./trigger_service;trigger_service";
//option go_package = "grpc/pb/triggerpb";

import "google/protobuf/empty.proto";

// Define the service
service TriggerInstance {
  // 开启实例
  rpc StartInstance (StartTriggerRequest) returns (StartTriggerResponse);
  // 暂停实例
  rpc StopInstance (StopTriggerRequest) returns (google.protobuf.Empty);
  // 查看所有启动的实例ids
  rpc ListInstances (google.protobuf.Empty) returns (TriggerListResponse);
  // 检查apikey连通性
  rpc CheckApiKey (APIConfig) returns (CheckApiKeyHealthyResponse);
  // 修改止盈参数
  rpc UpdateProfitTargetConfig(ProfitTargetConfig) returns (google.protobuf.Empty);
  // 修改执行参数
  rpc UpdateExecuteConfig(ExecuteConfig) returns (google.protobuf.Empty);
}

// Message definitions
message StartTriggerRequest {
  string        instance_id = 1; // 中台实例id
  string        open_price = 2; // 开仓价格
  string        close_price = 3; // 平仓价格
  string        side = 4; // 开仓方向
  string        amount = 5; //开仓数量
  string        symbol = 6; // 交易对
  string        stop_time = 7; //停止时间
  string        user_id = 8; // 实例启动中台user_id
  APIConfig     api_config = 9; //Apikey相关
  ProfitTargetConfig profit_target_config = 10; // 止盈配置
  ExecuteConfig execute_config = 11; //执行参数配置
  string        close_order_type = 12; //平仓模式 taker or maker
}

message CheckApiKeyHealthyRequest {
  string api_key = 1;
  string secret_key = 2;
  string exchange = 3;
}

message CheckApiKeyHealthyResponse {
  bool is_health = 1;
}

message StartTriggerResponse {
  string instance_id = 1;
}

message StopTriggerRequest {
  string instance_id = 1;
}

message TriggerListResponse {
  repeated string instance_ids = 1;
}

/**配置**/
message APIConfig {
  string api_key = 1;
  string secret_key = 2;
  string exchange = 3;
}

message ProfitTargetConfig {
  string        instance_id = 1; // 中台实例id
  ProfitTargetType profit_target_type = 2;
  oneof config {
    FloatingTypeConfig floating_config = 3;
    LimitTypeConfig limit_config = 4;
  }
}

// 浮动止盈参数
message FloatingTypeConfig {
  double callback_ratio = 1; // 回调比例，比如40%传的就是0.4
  double cutoff_ratio = 2; //止盈比例，如果不设置值，则认为是全部止盈,1
  double min_profit = 3; //最低盈利金额，可不填
}

// 限价止盈参数
message LimitTypeConfig {
  double profit_target_price = 1; //限定的止盈价格
  double loss_target_price = 2; //限定的止损价格
}

// 执行参数
message ExecuteConfig {
  string instance_id = 1; // 中台实例id
  uint32 execute_num = 2; //任务执行次数
  uint32 delay_time = 3; //延迟时间，单位s
}

/* 枚举 **/
enum ProfitTargetType {
  UNKNOWN = 0; 
  LIMIT = 1;
  FLOATING = 2;
}