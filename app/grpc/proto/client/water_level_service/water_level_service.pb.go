// proto/water_level_service.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.20.3
// source: water_level_service.proto

package water_level_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyType int32

const (
	CurrencyType_Token      CurrencyType = 0
	CurrencyType_StableCoin CurrencyType = 1
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "Token",
		1: "StableCoin",
	}
	CurrencyType_value = map[string]int32{
		"Token":      0,
		"StableCoin": 1,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_water_level_service_proto_enumTypes[0].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_water_level_service_proto_enumTypes[0]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{0}
}

// Message definitions
type StartInstanceRequest struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	InstanceId                string                     `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                                                        // 中台实例id
	ExchangeType              string                     `protobuf:"bytes,2,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`                                                  // 目前只有Binance一个值
	CurrencyType              int32                      `protobuf:"varint,3,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`                                                 // 交易币种类型 0-普通Token(SOL,TRUMP,...) 1-StableCoin(比如USDT,USDC)
	Currency                  string                     `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                                                                              // 交易币种/stable coin name/token name
	PubKey                    *string                    `protobuf:"bytes,5,opt,name=pub_key,json=pubKey,proto3,oneof" json:"pub_key,omitempty"`                                                              // 交易币种在solana mainnet链上的pubkey，SOL留空，其他token必填
	TokenThresholdConfig      *TokenThresholdConfig      `protobuf:"bytes,6,opt,name=token_threshold_config,json=tokenThresholdConfig,proto3,oneof" json:"token_threshold_config,omitempty"`                  // 普通币种配置
	StableCoinThresholdConfig *StableCoinThresholdConfig `protobuf:"bytes,7,opt,name=stable_coin_threshold_config,json=stableCoinThresholdConfig,proto3,oneof" json:"stable_coin_threshold_config,omitempty"` // 稳定币配置
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *StartInstanceRequest) Reset() {
	*x = StartInstanceRequest{}
	mi := &file_water_level_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceRequest) ProtoMessage() {}

func (x *StartInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceRequest.ProtoReflect.Descriptor instead.
func (*StartInstanceRequest) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StartInstanceRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *StartInstanceRequest) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *StartInstanceRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StartInstanceRequest) GetPubKey() string {
	if x != nil && x.PubKey != nil {
		return *x.PubKey
	}
	return ""
}

func (x *StartInstanceRequest) GetTokenThresholdConfig() *TokenThresholdConfig {
	if x != nil {
		return x.TokenThresholdConfig
	}
	return nil
}

func (x *StartInstanceRequest) GetStableCoinThresholdConfig() *StableCoinThresholdConfig {
	if x != nil {
		return x.StableCoinThresholdConfig
	}
	return nil
}

type TokenThresholdConfig struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AlertThreshold      string                 `protobuf:"bytes,1,opt,name=alert_threshold,json=alertThreshold,proto3" json:"alert_threshold,omitempty"`
	BuyTriggerThreshold string                 `protobuf:"bytes,2,opt,name=buy_trigger_threshold,json=buyTriggerThreshold,proto3" json:"buy_trigger_threshold,omitempty"`
	// string target_balance_threshold = 3; // 取消这个字段，改为(buy_trigger_threshold + target_balance_threshold)/2
	SellTriggerThreshold string `protobuf:"bytes,4,opt,name=sell_trigger_threshold,json=sellTriggerThreshold,proto3" json:"sell_trigger_threshold,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TokenThresholdConfig) Reset() {
	*x = TokenThresholdConfig{}
	mi := &file_water_level_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenThresholdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenThresholdConfig) ProtoMessage() {}

func (x *TokenThresholdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenThresholdConfig.ProtoReflect.Descriptor instead.
func (*TokenThresholdConfig) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{1}
}

func (x *TokenThresholdConfig) GetAlertThreshold() string {
	if x != nil {
		return x.AlertThreshold
	}
	return ""
}

func (x *TokenThresholdConfig) GetBuyTriggerThreshold() string {
	if x != nil {
		return x.BuyTriggerThreshold
	}
	return ""
}

func (x *TokenThresholdConfig) GetSellTriggerThreshold() string {
	if x != nil {
		return x.SellTriggerThreshold
	}
	return ""
}

type StableCoinThresholdConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AlertThreshold string                 `protobuf:"bytes,1,opt,name=alert_threshold,json=alertThreshold,proto3" json:"alert_threshold,omitempty"` // 报警阈值
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StableCoinThresholdConfig) Reset() {
	*x = StableCoinThresholdConfig{}
	mi := &file_water_level_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StableCoinThresholdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCoinThresholdConfig) ProtoMessage() {}

func (x *StableCoinThresholdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCoinThresholdConfig.ProtoReflect.Descriptor instead.
func (*StableCoinThresholdConfig) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{2}
}

func (x *StableCoinThresholdConfig) GetAlertThreshold() string {
	if x != nil {
		return x.AlertThreshold
	}
	return ""
}

type UpdateInstanceParamsRequest struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	InstanceId                string                     `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	CurrencyType              int32                      `protobuf:"varint,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`                                                 // 要保持和StartInstanceRequest中的currency_type一致，否则会报错
	TokenThresholdConfig      *TokenThresholdConfig      `protobuf:"bytes,3,opt,name=token_threshold_config,json=tokenThresholdConfig,proto3,oneof" json:"token_threshold_config,omitempty"`                  // 普通币种配置
	StableCoinThresholdConfig *StableCoinThresholdConfig `protobuf:"bytes,4,opt,name=stable_coin_threshold_config,json=stableCoinThresholdConfig,proto3,oneof" json:"stable_coin_threshold_config,omitempty"` // 稳定币配置
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UpdateInstanceParamsRequest) Reset() {
	*x = UpdateInstanceParamsRequest{}
	mi := &file_water_level_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInstanceParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceParamsRequest) ProtoMessage() {}

func (x *UpdateInstanceParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceParamsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceParamsRequest) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateInstanceParamsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceParamsRequest) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *UpdateInstanceParamsRequest) GetTokenThresholdConfig() *TokenThresholdConfig {
	if x != nil {
		return x.TokenThresholdConfig
	}
	return nil
}

func (x *UpdateInstanceParamsRequest) GetStableCoinThresholdConfig() *StableCoinThresholdConfig {
	if x != nil {
		return x.StableCoinThresholdConfig
	}
	return nil
}

type InstanceListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceIds   []string               `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstanceListResponse) Reset() {
	*x = InstanceListResponse{}
	mi := &file_water_level_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceListResponse) ProtoMessage() {}

func (x *InstanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceListResponse.ProtoReflect.Descriptor instead.
func (*InstanceListResponse) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{4}
}

func (x *InstanceListResponse) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type InstantId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstantId) Reset() {
	*x = InstantId{}
	mi := &file_water_level_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstantId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantId) ProtoMessage() {}

func (x *InstantId) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantId.ProtoReflect.Descriptor instead.
func (*InstantId) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{5}
}

func (x *InstantId) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetStateResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TraderSwitch         bool                   `protobuf:"varint,1,opt,name=trader_switch,json=traderSwitch,proto3" json:"trader_switch,omitempty"`                          // 交易开关 true:开 false:关
	Currency             string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                                                       // 交易币种
	MarginAccountBalance string                 `protobuf:"bytes,3,opt,name=margin_account_balance,json=marginAccountBalance,proto3" json:"margin_account_balance,omitempty"` // 交易所全仓杠杆账户该币种余额，空字符表示未获取到余额
	SpotAccountBalance   string                 `protobuf:"bytes,4,opt,name=spot_account_balance,json=spotAccountBalance,proto3" json:"spot_account_balance,omitempty"`       // 交易所现货账户该币种余额，空字符表示未获取到余额
	ChainWalletBalance   string                 `protobuf:"bytes,5,opt,name=chain_wallet_balance,json=chainWalletBalance,proto3" json:"chain_wallet_balance,omitempty"`       // 链上钱包该币种余额，空字符表示未获取到余额
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	mi := &file_water_level_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_water_level_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_water_level_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetStateResponse) GetTraderSwitch() bool {
	if x != nil {
		return x.TraderSwitch
	}
	return false
}

func (x *GetStateResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetStateResponse) GetMarginAccountBalance() string {
	if x != nil {
		return x.MarginAccountBalance
	}
	return ""
}

func (x *GetStateResponse) GetSpotAccountBalance() string {
	if x != nil {
		return x.SpotAccountBalance
	}
	return ""
}

func (x *GetStateResponse) GetChainWalletBalance() string {
	if x != nil {
		return x.ChainWalletBalance
	}
	return ""
}

var File_water_level_service_proto protoreflect.FileDescriptor

var file_water_level_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x03,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a,
	0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x16, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x74, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x19, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xa9, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x62, 0x75, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x44, 0x0a, 0x19, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0xfb, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a,
	0x1c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x19, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x39, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x70, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0x29, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x01, 0x32, 0xbf, 0x03, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x29, 0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x25,
	0x2e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x2e, 0x2f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_water_level_service_proto_rawDescOnce sync.Once
	file_water_level_service_proto_rawDescData = file_water_level_service_proto_rawDesc
)

func file_water_level_service_proto_rawDescGZIP() []byte {
	file_water_level_service_proto_rawDescOnce.Do(func() {
		file_water_level_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_water_level_service_proto_rawDescData)
	})
	return file_water_level_service_proto_rawDescData
}

var file_water_level_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_water_level_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_water_level_service_proto_goTypes = []any{
	(CurrencyType)(0),                   // 0: water_level_service.CurrencyType
	(*StartInstanceRequest)(nil),        // 1: water_level_service.StartInstanceRequest
	(*TokenThresholdConfig)(nil),        // 2: water_level_service.TokenThresholdConfig
	(*StableCoinThresholdConfig)(nil),   // 3: water_level_service.StableCoinThresholdConfig
	(*UpdateInstanceParamsRequest)(nil), // 4: water_level_service.UpdateInstanceParamsRequest
	(*InstanceListResponse)(nil),        // 5: water_level_service.InstanceListResponse
	(*InstantId)(nil),                   // 6: water_level_service.InstantId
	(*GetStateResponse)(nil),            // 7: water_level_service.GetStateResponse
	(*emptypb.Empty)(nil),               // 8: google.protobuf.Empty
}
var file_water_level_service_proto_depIdxs = []int32{
	2, // 0: water_level_service.StartInstanceRequest.token_threshold_config:type_name -> water_level_service.TokenThresholdConfig
	3, // 1: water_level_service.StartInstanceRequest.stable_coin_threshold_config:type_name -> water_level_service.StableCoinThresholdConfig
	2, // 2: water_level_service.UpdateInstanceParamsRequest.token_threshold_config:type_name -> water_level_service.TokenThresholdConfig
	3, // 3: water_level_service.UpdateInstanceParamsRequest.stable_coin_threshold_config:type_name -> water_level_service.StableCoinThresholdConfig
	1, // 4: water_level_service.Instance.StartInstance:input_type -> water_level_service.StartInstanceRequest
	4, // 5: water_level_service.Instance.UpdateInstanceParams:input_type -> water_level_service.UpdateInstanceParamsRequest
	6, // 6: water_level_service.Instance.StopInstance:input_type -> water_level_service.InstantId
	8, // 7: water_level_service.Instance.ListInstances:input_type -> google.protobuf.Empty
	6, // 8: water_level_service.Instance.GetInstanceState:input_type -> water_level_service.InstantId
	6, // 9: water_level_service.Instance.StartInstance:output_type -> water_level_service.InstantId
	8, // 10: water_level_service.Instance.UpdateInstanceParams:output_type -> google.protobuf.Empty
	8, // 11: water_level_service.Instance.StopInstance:output_type -> google.protobuf.Empty
	5, // 12: water_level_service.Instance.ListInstances:output_type -> water_level_service.InstanceListResponse
	7, // 13: water_level_service.Instance.GetInstanceState:output_type -> water_level_service.GetStateResponse
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_water_level_service_proto_init() }
func file_water_level_service_proto_init() {
	if File_water_level_service_proto != nil {
		return
	}
	file_water_level_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_water_level_service_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_water_level_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_water_level_service_proto_goTypes,
		DependencyIndexes: file_water_level_service_proto_depIdxs,
		EnumInfos:         file_water_level_service_proto_enumTypes,
		MessageInfos:      file_water_level_service_proto_msgTypes,
	}.Build()
	File_water_level_service_proto = out.File
	file_water_level_service_proto_rawDesc = nil
	file_water_level_service_proto_goTypes = nil
	file_water_level_service_proto_depIdxs = nil
}
