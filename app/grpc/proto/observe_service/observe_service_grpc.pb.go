// proto/observe_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: observe_service.proto

package observe_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Observer_StartObserver_FullMethodName    = "/grpc_service.Observer/StartObserver"
	Observer_StopObserver_FullMethodName     = "/grpc_service.Observer/StopObserver"
	Observer_ListObservers_FullMethodName    = "/grpc_service.Observer/ListObservers"
	Observer_GetObserverState_FullMethodName = "/grpc_service.Observer/GetObserverState"
)

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserverClient interface {
	StartObserver(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopObserver(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListObservers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	GetObserverState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) StartObserver(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, Observer_StartObserver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) StopObserver(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Observer_StopObserver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) ListObservers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Observer_ListObservers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) GetObserverState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, Observer_GetObserverState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObserverServer is the server API for Observer service.
// All implementations must embed UnimplementedObserverServer
// for forward compatibility
type ObserverServer interface {
	StartObserver(context.Context, *StartRequest) (*StartResponse, error)
	StopObserver(context.Context, *StopRequest) (*emptypb.Empty, error)
	ListObservers(context.Context, *emptypb.Empty) (*ListResponse, error)
	GetObserverState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedObserverServer()
}

// UnimplementedObserverServer must be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (UnimplementedObserverServer) StartObserver(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartObserver not implemented")
}
func (UnimplementedObserverServer) StopObserver(context.Context, *StopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopObserver not implemented")
}
func (UnimplementedObserverServer) ListObservers(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObservers not implemented")
}
func (UnimplementedObserverServer) GetObserverState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObserverState not implemented")
}
func (UnimplementedObserverServer) mustEmbedUnimplementedObserverServer() {}

// UnsafeObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserverServer will
// result in compilation errors.
type UnsafeObserverServer interface {
	mustEmbedUnimplementedObserverServer()
}

func RegisterObserverServer(s grpc.ServiceRegistrar, srv ObserverServer) {
	s.RegisterService(&Observer_ServiceDesc, srv)
}

func _Observer_StartObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).StartObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Observer_StartObserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).StartObserver(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_StopObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).StopObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Observer_StopObserver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).StopObserver(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_ListObservers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).ListObservers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Observer_ListObservers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).ListObservers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_GetObserverState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).GetObserverState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Observer_GetObserverState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).GetObserverState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Observer_ServiceDesc is the grpc.ServiceDesc for Observer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Observer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartObserver",
			Handler:    _Observer_StartObserver_Handler,
		},
		{
			MethodName: "StopObserver",
			Handler:    _Observer_StopObserver_Handler,
		},
		{
			MethodName: "ListObservers",
			Handler:    _Observer_ListObservers_Handler,
		},
		{
			MethodName: "GetObserverState",
			Handler:    _Observer_GetObserverState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "observe_service.proto",
}
