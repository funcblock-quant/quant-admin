// proto/quanta_admin_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: quanta_admin_service.proto

package quanta_admin_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuantaAdmin_GetStrategyInstanceConfig_FullMethodName = "/grpc_service.QuantaAdmin/GetStrategyInstanceConfig"
	QuantaAdmin_GetStartOrStopFlag_FullMethodName        = "/grpc_service.QuantaAdmin/GetStartOrStopFlag"
)

// QuantaAdminClient is the client API for QuantaAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuantaAdminClient interface {
	// 获取策略实例配置信息
	GetStrategyInstanceConfig(ctx context.Context, in *CommonGetRequest, opts ...grpc.CallOption) (*GetInstanceConfigResponse, error)
	// 获取策略启停标志
	GetStartOrStopFlag(ctx context.Context, in *CommonGetRequest, opts ...grpc.CallOption) (*GetStartOrStopFlagResponse, error)
}

type quantaAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewQuantaAdminClient(cc grpc.ClientConnInterface) QuantaAdminClient {
	return &quantaAdminClient{cc}
}

func (c *quantaAdminClient) GetStrategyInstanceConfig(ctx context.Context, in *CommonGetRequest, opts ...grpc.CallOption) (*GetInstanceConfigResponse, error) {
	out := new(GetInstanceConfigResponse)
	err := c.cc.Invoke(ctx, QuantaAdmin_GetStrategyInstanceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantaAdminClient) GetStartOrStopFlag(ctx context.Context, in *CommonGetRequest, opts ...grpc.CallOption) (*GetStartOrStopFlagResponse, error) {
	out := new(GetStartOrStopFlagResponse)
	err := c.cc.Invoke(ctx, QuantaAdmin_GetStartOrStopFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuantaAdminServer is the server API for QuantaAdmin service.
// All implementations must embed UnimplementedQuantaAdminServer
// for forward compatibility
type QuantaAdminServer interface {
	// 获取策略实例配置信息
	GetStrategyInstanceConfig(context.Context, *CommonGetRequest) (*GetInstanceConfigResponse, error)
	// 获取策略启停标志
	GetStartOrStopFlag(context.Context, *CommonGetRequest) (*GetStartOrStopFlagResponse, error)
	mustEmbedUnimplementedQuantaAdminServer()
}

// UnimplementedQuantaAdminServer must be embedded to have forward compatible implementations.
type UnimplementedQuantaAdminServer struct {
}

func (UnimplementedQuantaAdminServer) GetStrategyInstanceConfig(context.Context, *CommonGetRequest) (*GetInstanceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyInstanceConfig not implemented")
}
func (UnimplementedQuantaAdminServer) GetStartOrStopFlag(context.Context, *CommonGetRequest) (*GetStartOrStopFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStartOrStopFlag not implemented")
}
func (UnimplementedQuantaAdminServer) mustEmbedUnimplementedQuantaAdminServer() {}

// UnsafeQuantaAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuantaAdminServer will
// result in compilation errors.
type UnsafeQuantaAdminServer interface {
	mustEmbedUnimplementedQuantaAdminServer()
}

func RegisterQuantaAdminServer(s grpc.ServiceRegistrar, srv QuantaAdminServer) {
	s.RegisterService(&QuantaAdmin_ServiceDesc, srv)
}

func _QuantaAdmin_GetStrategyInstanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantaAdminServer).GetStrategyInstanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantaAdmin_GetStrategyInstanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantaAdminServer).GetStrategyInstanceConfig(ctx, req.(*CommonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantaAdmin_GetStartOrStopFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantaAdminServer).GetStartOrStopFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantaAdmin_GetStartOrStopFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantaAdminServer).GetStartOrStopFlag(ctx, req.(*CommonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuantaAdmin_ServiceDesc is the grpc.ServiceDesc for QuantaAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuantaAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.QuantaAdmin",
	HandlerType: (*QuantaAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrategyInstanceConfig",
			Handler:    _QuantaAdmin_GetStrategyInstanceConfig_Handler,
		},
		{
			MethodName: "GetStartOrStopFlag",
			Handler:    _QuantaAdmin_GetStartOrStopFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quanta_admin_service.proto",
}
